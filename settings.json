{
  // vim mappings of jooize's vim-colemak mappings from https://github.com/jooize/vim-colemak
  // Legend:
  // <C-X>     Ctrl-X
  // (c     )  Command-line mode
  // ( i    )  Insert mode
  // (  n   )  Normal mode
  // (   o  )  Operator pending
  // (    v )  Visual+Select mode
  // (     x)  Visual mode
  "vim.normalModeKeyBindingsNonRecursive": [
      // Default movement (up, down, left, right)
      // (  novx)  h = h (Left)     i = l (Right)     e = k (Up)     n = j (Down)
      {
      "before": ["n"],
      "after": ["h"]
      },
      {
      "before": ["e"],
      "after": ["j"]
      },
      {
      "before": ["i"],
      "after": ["k"]
      },
      {
      "before": ["o"],
      "after": ["l"]
      },

      // Jumping Words
      // (  novx)  l = b (Back word)            L = B (Back WORD)
      // (  novx)  y = w (Forward word)         Y = W (Forward WORD)
      // (  novx)  u = e (Forward end of word)  U = E (Forward end of WORD)
      {
      "before": ["l"],
      "after": ["b"]
      },
      {
      "before": ["L"],
      "after": ["B"]
      },
      {
      "before": ["u"],
      "after": ["e"]
      },
      {
      "before": ["U"],
      "after": ["E"]
      },
      {
      "before": ["y"],
      "after": ["w"]
      },
      {
      "before": ["Y"],
      "after": ["W"]
      },

      // Normal Mode actions
      // (  n  x)  a = v (Visual)   A = V (Visual line)
      // (  n   )  r = r (Replace)  R = R (Replace)
      // (  n   )  s = i (Insert)   S = I (Insert before first non-blank of line)
      // (  n   )  t = a (Append)   T = A (Append at end of line)
      // (  n   )  w = c (Change)   W = C (Change to end of line)  ww = cc (Change line)
      {
      "before": ["a"],
      "after": ["v"]
      },
      {
      "before": ["A"],
      "after": ["V"]
      },
      {
      "before": ["s"],
      "after": ["i"]
      },
      {
      "before": ["S"],
      "after": ["I"]
      },
      {
      "before": ["t"],
      "after": ["a"]
      },
      {
      "before": ["T"],
      "after": ["A"]
      },
      {
      "before": ["w"],
      "after": ["c"]
      },
      {
      "before": ["W"],
      "after": ["C"]
      },
      {
      "before": ["h"],
      "after": ["o"]
      },
      {
      "before": ["H"],
      "after": ["O"]
      },

      // undo, cut, copy, paste
      // (  n  x)  z = u (Undo)    Z = <C-R> (Redo)  gz = U (Undo all latest changes on line)
      // (  n  x)  x = x (Cut)     X = dd (Cut line)
      // (  n  x)  c = y (Copy)    C = yy (Copy line)
      // (  n  x)  v = p (Paste)   V = P (Paste)
      {
      "before": ["z"],
      "after": ["u"]
      },
      {
      "before": ["Z"],
      "after": ["<C-R>"]
      },
      {
      "before": ["c"],
      "after": ["y"]
      },
      {
      "before": ["C"],
      "after": ["y", "y"]
      },
      {
      "before": ["v"],
      "after": ["p"]
      },
      {
      "before": ["V"],
      "after": ["P"]
      },

      // (  no x)  p = t{char} (Before next {char})  P = T{char} (After previous {char})
      // (  no x)  b = ; (Repeat latest f or t)  B = , (Repeat latest f or t reversed)
      // (  no x)  k = n (Repeat latest / or ?)  K = N (Repeat latest / or ? reversed)
      {
      "before": ["p"],
      "after": ["t", "{char}"]
      },
      {
      "before": ["P"],
      "after": ["T", "{char}"]
      },
      {
      "before": ["b"],
      "after": [";"]
      },
      {
      "before": ["B"],
      "after": [","]
      },
      {
      "before": ["k"],
      "after": ["n"]
      },
      {
      "before": ["K"],
      "after": ["N"]
      },

      // (  n  x)  j = z
      // (  n  x)  jn = zj (Next fold) [Also jj = zj]
      // (  n  x)  je = zk (Previous fold) [Also jk = zk]
      {
      "before": ["j"],
      "after": ["z"]
      },
      {
      "before": ["j", "n"],
      "after": ["z", "j"]
      },
      {
      "before": ["j", "j"],
      "after": ["z", "j"]
      },
      {
      "before": ["j", "e"],
      "after": ["z", "k"]
      },
      {
      "before": ["j", "e"],
      "after": ["z", "k"]
      },

      // (  n   )  ga = gv (Reselect last visual selection)
      // (  n  x)  gK = K (Lookup)
      // (  n  x)  gL = L (To line [count] from bottom of window)
      {
      "before": ["g", "a"],
      "after": ["g", "v"]
      },
      {
      "before": ["g", "K"],
      "after": ["K"]
      },
      {
      "before": ["g", "L"],
      "after": ["L"]
      },

      {
        "before":["m"], 
        "after":["leader", "leader", "f"]
      }
  ],

  "vim.visualModeKeyBindingsNonRecursive": [
      // Default movement (up, down, left, right)
      // (  novx)  h = h (Left)     i = l (Right)     e = k (Up)     n = j (Down)
      {
      "before": ["n"],
      "after": ["h"]
      },
      {
      "before": ["e"],
      "after": ["j"]
      },
      {
      "before": ["i"],
      "after": ["k"]
      },
      {
      "before": ["o"],
      "after": ["l"]
      },

      // Jumping Words
      // (  novx)  l = b (Back word)            L = B (Back WORD)
      // (  novx)  y = w (Forward word)         Y = W (Forward WORD)
      // (  novx)  u = e (Forward end of word)  U = E (Forward end of WORD)
      {
      "before": ["l"],
      "after": ["b"]
      },
      {
      "before": ["L"],
      "after": ["B"]
      },
      {
      "before": ["u"],
      "after": ["e"]
      },
      {
      "before": ["U"],
      "after": ["E"]
      },
      {
      "before": ["y"],
      "after": ["w"]
      },
      {
      "before": ["Y"],
      "after": ["W"]
      },

      // Normal Mode actions
      // (  n  x)  a = v (Visual)   A = V (Visual line)
      {
      "before": ["a"],
      "after": ["v"]
      },
      {
      "before": ["A"],
      "after": ["V"]
      },
      
  
      // undo, cut, copy, paste
      // (  n  x)  z = u (Undo)    Z = <C-R> (Redo)  gz = U (Undo all latest changes on line)
      // (  n  x)  x = x (Cut)     X = dd (Cut line)
      // (  n  x)  c = y (Copy)    C = yy (Copy line)
      // (  n  x)  v = p (Paste)   V = P (Paste)
      {
      "before": ["z"],
      "after": ["u"]
      },
      {
      "before": ["Z"],
      "after": ["<C-R>"]
      },
      {
      "before": ["c"],
      "after": ["y"]
      },
      {
      "before": ["C"],
      "after": ["y", "y"]
      },
      {
      "before": ["v"],
      "after": ["p"]
      },
      {
      "before": ["V"],
      "after": ["P"]
      },

      // (  no x)  p = t{char} (Before next {char})  P = T{char} (After previous {char})
      // (  no x)  b = ; (Repeat latest f or t)  B = , (Repeat latest f or t reversed)
      // (  no x)  k = n (Repeat latest / or ?)  K = N (Repeat latest / or ? reversed)
      {
      "before": ["p"],
      "after": ["t", "{char}"]
      },
      {
      "before": ["P"],
      "after": ["T", "{char}"]
      },
      {
      "before": ["b"],
      "after": [";"]
      },
      {
      "before": ["B"],
      "after": [","]
      },
      {
      "before": ["k"],
      "after": ["n"]
      },
      {
      "before": ["K"],
      "after": ["N"]
      },

      // (  n  x)  j = z
      // (  n  x)  jn = zj (Next fold) [Also jj = zj]
      // (  n  x)  je = zk (Previous fold) [Also jk = zk]
      {
      "before": ["j"],
      "after": ["z"]
      },
      {
      "before": ["j", "n"],
      "after": ["z", "j"]
      },
      {
      "before": ["j", "j"],
      "after": ["z", "j"]
      },
      {
      "before": ["j", "e"],
      "after": ["z", "k"]
      },
      {
      "before": ["j", "e"],
      "after": ["z", "k"]
      },

      // (  n  x)  gK = K (Lookup)
      // (  n  x)  gL = L (To line [count] from bottom of window)
      {
      "before": ["g", "K"],
      "after": ["K"]
      },
      {
      "before": ["g", "L"],
      "after": ["L"]
      }
  ],

  "vim.operatorPendingModeKeyBindingsNonRecursive": [
      // Default movement (up, down, left, right)
      // (  novx)  h = h (Left)     i = l (Right)     e = k (Up)     n = j (Down)
      {
      "before": ["n"],
      "after": ["h"]
      },
      {
      "before": ["e"],
      "after": ["j"]
      },
      {
      "before": ["i"],
      "after": ["k"]
      },
      {
      "before": ["o"],
      "after": ["l"]
      },

      // Jumping Words
      // (  novx)  l = b (Back word)            L = B (Back WORD)
      // (  novx)  y = w (Forward word)         Y = W (Forward WORD)
      // (  novx)  u = e (Forward end of word)  U = E (Forward end of WORD)
      {
      "before": ["l"],
      "after": ["b"]
      },
      {
      "before": ["L"],
      "after": ["B"]
      },
      {
      "before": ["u"],
      "after": ["e"]
      },
      {
      "before": ["U"],
      "after": ["E"]
      },
      {
      "before": ["y"],
      "after": ["w"]
      },
      {
      "before": ["Y"],
      "after": ["W"]
      },

      // (   o  )  r = i (Example: dip -> drp (Delete inner paragraph))
      {
      "before": ["r"],
      "after": ["i"]
      },

      // (  no x)  p = t{char} (Before next {char})  P = T{char} (After previous {char})
      // (  no x)  b = ; (Repeat latest f or t)  B = , (Repeat latest f or t reversed)
      // (  no x)  k = n (Repeat latest / or ?)  K = N (Repeat latest / or ? reversed)
      {
      "before": ["p"],
      "after": ["t", "{char}"]
      },
      {
      "before": ["P"],
      "after": ["T", "{char}"]
      },
      {
      "before": ["b"],
      "after": [";"]
      },
      {
      "before": ["B"],
      "after": [","]
      },
      {
      "before": ["k"],
      "after": ["n"]
      },
      {
      "before": ["K"],
      "after": ["N"]
      }
  ],

  // Lost:
  // Honestly, I don't even use these so i'm not going to create a vim mapping for them
  // (  n  x)  H (To line [count] from top of window)
  // (  n  x)  s (Substitute [count] characters) [Use wi = cl]
  // (  n  x)  S (Substitute [count] lines) [Use ww = cc]
  // (  n  x)  X (Cut [count] characters backwards) [Use dh = dh]
"vim.easymotion": true,
"vim.foldfix": true,    
"vim.leader": "<space>",
"vim.useSystemClipboard": true,
"vim.hlsearch": true
}